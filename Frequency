import pandas as pd
!pip install Bio
import sys
import os
import time
import argparse
from collections import Counter,defaultdict
from numpy import log
from Bio import AlignIO
from Bio import PDB

import numpy as np  # Import numpy for initialization

align = AlignIO.read("c:\\Users\\Filippo\\Desktop\\BioinformaticsPmmo\\AligmentMega.fas", "fasta")

def frequency(align):
    # Create an empty DataFrame with columns for amino acids
    amino_acids = ['-']
    df = pd.DataFrame(columns=amino_acids, data=np.zeros((len(align[0]), len(amino_acids))))

    # Iterate through the alignment and count amino acids at each position
    for a in range(len(align[0])):
        for x in align[:, a]:
            if x in amino_acids:
                df.at[a, x] += 1
            else:
                # Add new amino acid to the DataFrame
                amino_acids.append(x)
                df[x] = 0
                df.at[a, x] = 1
    
    #changes the index in order that the first aa is actually 1
    df.index = df.index + 1

    return df

# Example usage (assuming 'align' is a valid MSA)
frequency_table = frequency(align)
# Iterate through each row to find the most frequent amino acid and its frequency percentage
most_frequent_amino_acids = []
identity = []

for index, row in frequency_table.iterrows():
    most_frequent_amino_acid = row.idxmax()
    most_frequent_count = row.max()
    total_count = row.sum()
    identity_percentage = (most_frequent_count / total_count) * 100

    most_frequent_amino_acids.append(most_frequent_amino_acid)
    identity.append(identity_percentage)

# Add new columns for the most frequent amino acid and its frequency percentage
frequency_table['MostFrequentAminoAcid'] = most_frequent_amino_acids
frequency_table['FrequencyPercentage'] = identity

print(frequency_table)


# Load the PDB file
parser = PDB.PDBParser(QUIET=True)
structure = parser.get_structure("my_protein", "c:\\Users\\Filippo\\Desktop\\BioinformaticsPmmo\\3rgb.fas")

# Define a function to change the color of specific amino acids
def change_amino_acid_color(structure, target_amino_acid, new_color):
    for model in structure:
        for chain in model:
            for residue in chain:
                if residue.get_resname() == target_amino_acid:
                    for atom in residue:
                        atom.set_bfactor(new_color)  # Set the B-factor as a representation of color

# Change the color of all Cysteine (CYS) residues to red
change_amino_acid_color(structure, "CYS", 1.0)  # Set B-factor to 1.0 for red

# Save the modified structure to a new PDB file
io = PDB.PDBIO()
io.set_structure(structure)
io.save("path/to/modified_color.pdb")







